{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gorek\\\\resume_projects\\\\DCU_news_app\\\\frontend\\\\src\\\\pages\\\\CharacterPages.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport api from \"../auth/axios\";\nimport { Container, Typography, Card, CardContent, Grid } from \"@mui/material\";\nimport SearchAppBar from \"../componets/AppBar\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CharacterPage() {\n  _s();\n  const {\n    name\n  } = useParams();\n  const [posts, setPosts] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  useEffect(() => {\n    fetchCharacterPosts();\n  }, [name]);\n  async function fetchCharacterPosts() {\n    try {\n      const response = await api.get(\"/reddit/posts-by-keyword\", {\n        params: {\n          keyword: name\n        }\n      });\n      setPosts(Array.isArray(response.data.posts) ? response.data.posts : []);\n    } catch (error) {\n      console.error(\"Failed to fetch character posts:\", error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SearchAppBar, {\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      style: {\n        marginTop: \"40px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: [\"Posts about: \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this), posts.length === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: \"No posts found for this character.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: post.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: [post.subreddit, \" \\u2014 \", post.date]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: post.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(CharacterPage, \"xLZ4aYUEU5rl5EAaQewLEWbZkd8=\", false, function () {\n  return [useParams];\n});\n_c = CharacterPage;\nvar _c;\n$RefreshReg$(_c, \"CharacterPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","api","Container","Typography","Card","CardContent","Grid","SearchAppBar","jsxDEV","_jsxDEV","Fragment","_Fragment","CharacterPage","_s","name","posts","setPosts","searchQuery","setSearchQuery","fetchCharacterPosts","response","get","params","keyword","Array","isArray","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","style","marginTop","variant","gutterBottom","length","container","spacing","map","post","index","item","xs","sm","md","title","color","subreddit","date","text","_c","$RefreshReg$"],"sources":["C:/Users/gorek/resume_projects/DCU_news_app/frontend/src/pages/CharacterPages.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport api from \"../auth/axios\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n} from \"@mui/material\";\r\n\r\nimport SearchAppBar from \"../componets/AppBar\";\r\n\r\nexport default function CharacterPage() {\r\n  const { name } = useParams();\r\n  const [posts, setPosts] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetchCharacterPosts();\r\n  }, [name]);\r\n\r\n  async function fetchCharacterPosts() {\r\n    try {\r\n      const response = await api.get(\"/reddit/posts-by-keyword\", {\r\n        params: { keyword: name },\r\n      });\r\n      setPosts(Array.isArray(response.data.posts) ? response.data.posts : []);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch character posts:\", error);\r\n    }\r\n  }\r\n\r\n  return (\r\n      <>\r\n     <SearchAppBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\r\n    <Container maxWidth=\"md\" style={{ marginTop: \"40px\" }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Posts about: {name}\r\n      </Typography>\r\n\r\n      {posts.length === 0 ? (\r\n        <Typography variant=\"body1\">No posts found for this character.</Typography>\r\n      ) : (\r\n        <Grid container spacing={2}>\r\n          {posts.map((post, index) => (\r\n            <Grid item xs={12} sm={6} md={4} key={index}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\">{post.title}</Typography>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    {post.subreddit} â€” {post.date}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\">{post.text}</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      )}\r\n    </Container>\r\n  </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}