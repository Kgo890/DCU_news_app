{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gorek\\\\resume_projects\\\\DCU_news_app\\\\frontend\\\\src\\\\pages\\\\CharacterPages.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport api from \"../auth/axios\";\nimport { Container, Typography, Card, CardContent, Grid } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CharacterPage() {\n  _s();\n  const {\n    name\n  } = useParams();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    fetchCharacterPosts();\n  }, [name]);\n  async function fetchCharacterPosts() {\n    try {\n      const response = await api.get(\"/reddit/posts_by_keyword\", {\n        params: {\n          keyword: name\n        }\n      });\n      setPosts(response.data.message);\n    } catch (error) {\n      console.error(\"Failed to fetch character posts:\", error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      style: {\n        marginTop: \"40px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: [\"Posts about: \", name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this), posts.length === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: \"No posts found for this character.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                children: post.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: [post.subreddit, \" \\u2014 \", post.date]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: post.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(CharacterPage, \"27qqNJeG+LyOpbhbKpvMXcpo378=\", false, function () {\n  return [useParams];\n});\n_c = CharacterPage;\nvar _c;\n$RefreshReg$(_c, \"CharacterPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","api","Container","Typography","Card","CardContent","Grid","jsxDEV","_jsxDEV","Fragment","_Fragment","CharacterPage","_s","name","posts","setPosts","fetchCharacterPosts","response","get","params","keyword","data","message","error","console","children","maxWidth","style","marginTop","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","length","container","spacing","map","post","index","item","xs","sm","md","title","color","subreddit","date","text","_c","$RefreshReg$"],"sources":["C:/Users/gorek/resume_projects/DCU_news_app/frontend/src/pages/CharacterPages.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport api from \"../auth/axios\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n} from \"@mui/material\";\r\n\r\nexport default function CharacterPage() {\r\n  const { name } = useParams();\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchCharacterPosts();\r\n  }, [name]);\r\n\r\n  async function fetchCharacterPosts() {\r\n    try {\r\n      const response = await api.get(\"/reddit/posts_by_keyword\", {\r\n        params: { keyword: name },\r\n      });\r\n      setPosts(response.data.message);\r\n    } catch (error) {\r\n      console.error(\"Failed to fetch character posts:\", error);\r\n    }\r\n  }\r\n\r\n  return (\r\n      <>\r\n     \r\n    <Container maxWidth=\"md\" style={{ marginTop: \"40px\" }}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Posts about: {name}\r\n      </Typography>\r\n\r\n      {posts.length === 0 ? (\r\n        <Typography variant=\"body1\">No posts found for this character.</Typography>\r\n      ) : (\r\n        <Grid container spacing={2}>\r\n          {posts.map((post, index) => (\r\n            <Grid item xs={12} sm={6} md={4} key={index}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant=\"h6\">{post.title}</Typography>\r\n                  <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    {post.subreddit} â€” {post.date}\r\n                  </Typography>\r\n                  <Typography variant=\"body2\">{post.text}</Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      )}\r\n    </Container>\r\n  </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}