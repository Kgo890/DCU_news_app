{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gorek\\\\resume_projects\\\\DCU_news_app\\\\frontend\\\\src\\\\pages\\\\DashboardPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Container, Typography, Button, TextField } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard() {\n  _s();\n  const [subreddit, setSubreddit] = useState(\"\");\n  const [max_posts, setMaxPosts] = useState(\"\");\n  const [tags, setTags] = useState(\"\");\n  const [from_date, setFromDate] = useState(\"\");\n  const [to_date, setToDate] = useState(\"\");\n  const [keyword, setKeyword] = useState(\"\");\n  const [post_id, setPostId] = useState(\"\");\n  const [reddit, setReddit] = useState(null);\n  const BASE_URL = \"http://localhost:8000/reddit\";\n  useEffect(() => {\n    getAllPosts();\n  }, []);\n  async function getAllPosts() {\n    try {\n      const response = await axios.get(`${BASE_URL}/posts`);\n      setReddit(response.data.message);\n    } catch (error) {\n      console.error(\"Fetching all posts failed\", error);\n    }\n  }\n  async function scrapingReddit() {\n    try {\n      const response = await axios.post(`${BASE_URL}/scrape`, {\n        subreddit,\n        max_posts: parseInt(max_posts),\n        tag: tags\n      });\n      setReddit(response.data);\n      setSubreddit(\"\");\n      setMaxPosts(\"\");\n      setTags(\"\");\n    } catch (error) {\n      console.error(\"Scrape failed\", error);\n    }\n  }\n  async function gettingPostsBySubreddit() {\n    try {\n      const response = await axios.get(`${BASE_URL}/posts-by-subreddit`, {\n        params: {\n          subreddit\n        }\n      });\n      setReddit(response.data);\n      setSubreddit(\"\");\n    } catch (error) {\n      console.error(\"Post by subreddit failed\", error);\n    }\n  }\n  async function gettingPostsByDate() {\n    try {\n      const response = await axios.get(`${BASE_URL}/posts-by-date-range`, {\n        params: {\n          from_date,\n          to_date\n        }\n      });\n      setReddit(response.data);\n    } catch (error) {\n      console.error(\"Post by date range failed\", error);\n    }\n  }\n  async function gettingPostsByKeyword() {\n    try {\n      const response = await axios.get(`${BASE_URL}/posts-by-keyword`, {\n        params: {\n          keyword\n        }\n      });\n      setReddit(response.data);\n    } catch (error) {\n      console.error(\"Post by keyword failed\", error);\n    }\n  }\n  async function gettingVerifiedSubreddits() {\n    try {\n      const response = await axios.get(`${BASE_URL}/verified-subreddits`);\n      setReddit(response.data);\n    } catch (error) {\n      console.error(\"Verified subreddits failed\", error);\n    }\n  }\n  async function deletingPostById() {\n    try {\n      const response = await axios.delete(`${BASE_URL}/delete-post-by-id`, {\n        params: {\n          post_id\n        }\n      });\n      setReddit(response.data);\n      setPostId(\"\");\n    } catch (error) {\n      console.error(\"Delete by post ID failed\", error);\n    }\n  }\n  async function deletingAllPost() {\n    try {\n      const response = await axios.delete(`${BASE_URL}/delete-all-post`);\n      setReddit(response.data);\n    } catch (error) {\n      console.error(\"Delete all posts failed\", error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"DCU Reddit Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(reddit, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"ETjgOceNEizYhKEmoBBIL7BDI6E=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","Container","Typography","Button","TextField","jsxDEV","_jsxDEV","Dashboard","_s","subreddit","setSubreddit","max_posts","setMaxPosts","tags","setTags","from_date","setFromDate","to_date","setToDate","keyword","setKeyword","post_id","setPostId","reddit","setReddit","BASE_URL","getAllPosts","response","get","data","message","error","console","scrapingReddit","post","parseInt","tag","gettingPostsBySubreddit","params","gettingPostsByDate","gettingPostsByKeyword","gettingVerifiedSubreddits","deletingPostById","delete","deletingAllPost","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/gorek/resume_projects/DCU_news_app/frontend/src/pages/DashboardPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Container, Typography, Button, TextField } from \"@mui/material\";\r\n\r\nexport default function Dashboard() {\r\n  const [subreddit, setSubreddit] = useState(\"\");\r\n  const [max_posts, setMaxPosts] = useState(\"\");\r\n  const [tags, setTags] = useState(\"\");\r\n  const [from_date, setFromDate] = useState(\"\");\r\n  const [to_date, setToDate] = useState(\"\");\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const [post_id, setPostId] = useState(\"\");\r\n  const [reddit, setReddit] = useState(null);\r\n\r\n  const BASE_URL = \"http://localhost:8000/reddit\";\r\n\r\n  useEffect(() => {\r\n    getAllPosts();\r\n  }, []);\r\n\r\n  async function getAllPosts() {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/posts`);\r\n      setReddit(response.data.message);\r\n    } catch (error) {\r\n      console.error(\"Fetching all posts failed\", error);\r\n    }\r\n  }\r\n\r\n  async function scrapingReddit() {\r\n    try {\r\n      const response = await axios.post(`${BASE_URL}/scrape`, {\r\n        subreddit,\r\n        max_posts: parseInt(max_posts),\r\n        tag: tags,\r\n      });\r\n      setReddit(response.data);\r\n      setSubreddit(\"\");\r\n      setMaxPosts(\"\");\r\n      setTags(\"\");\r\n    } catch (error) {\r\n      console.error(\"Scrape failed\", error);\r\n    }\r\n  }\r\n\r\n  async function gettingPostsBySubreddit() {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/posts-by-subreddit`, {\r\n        params: { subreddit },\r\n      });\r\n      setReddit(response.data);\r\n      setSubreddit(\"\");\r\n    } catch (error) {\r\n      console.error(\"Post by subreddit failed\", error);\r\n    }\r\n  }\r\n\r\n  async function gettingPostsByDate() {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/posts-by-date-range`, {\r\n        params: { from_date, to_date },\r\n      });\r\n      setReddit(response.data);\r\n    } catch (error) {\r\n      console.error(\"Post by date range failed\", error);\r\n    }\r\n  }\r\n\r\n  async function gettingPostsByKeyword() {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/posts-by-keyword`, {\r\n        params: { keyword },\r\n      });\r\n      setReddit(response.data);\r\n    } catch (error) {\r\n      console.error(\"Post by keyword failed\", error);\r\n    }\r\n  }\r\n\r\n\r\n  async function gettingVerifiedSubreddits() {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/verified-subreddits`);\r\n      setReddit(response.data);\r\n    } catch (error) {\r\n      console.error(\"Verified subreddits failed\", error);\r\n    }\r\n  }\r\n\r\n  async function deletingPostById() {\r\n    try {\r\n      const response = await axios.delete(`${BASE_URL}/delete-post-by-id`, {\r\n        params: { post_id },\r\n      });\r\n      setReddit(response.data);\r\n      setPostId(\"\");\r\n    } catch (error) {\r\n      console.error(\"Delete by post ID failed\", error);\r\n    }\r\n  }\r\n\r\n  async function deletingAllPost() {\r\n    try {\r\n      const response = await axios.delete(`${BASE_URL}/delete-all-post`);\r\n      setReddit(response.data);\r\n    } catch (error) {\r\n      console.error(\"Delete all posts failed\", error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        DCU Reddit Dashboard\r\n      </Typography>\r\n\r\n      {/* Add inputs/buttons here later as needed */}\r\n      <pre>{JSON.stringify(reddit, null, 2)}</pre>\r\n    </Container>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}